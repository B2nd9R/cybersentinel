"""
Link Guardian System
ูุธุงู ุญุงุฑุณ ุงูุฑูุงุจุท - ูุญุต ุงูุฑูุงุจุท ุงููุดุจููุฉ ูุงูุฎุจูุซุฉ
"""

import asyncio
import hashlib
import re
from typing import Dict, List, Optional, Tuple
from urllib.parse import urlparse
import aiohttp
import validators

from config import Config
from core.logger import get_security_logger
from core.database import db_manager
from api.virustotal import VirusTotalAPI

logger = get_security_logger()

class LinkGuardian:
    """ูุธุงู ุญูุงูุฉ ุงูุฑูุงุจุท ุงููุชูุฏู"""
    
    def __init__(self, api_key=None):
        self.vt_api = VirusTotalAPI(api_key) if api_key else VirusTotalAPI()
        self.url_cache = {}  # ูุงุด ููุฑูุงุจุท ุงูููุญูุตุฉ
        self.whitelist = set()  # ูุงุฆูุฉ ุงูุฑูุงุจุท ุงูุขููุฉ
        self.blacklist = set()  # ูุงุฆูุฉ ุงูุฑูุงุจุท ุงูุฎุทูุฑุฉ
        
        # ุฃููุงุท ุงูุฑูุงุจุท ุงููุดุจููุฉ
        self.suspicious_patterns = [
            r'bit\.ly',
            r'tinyurl\.com',
            r'discord\.gift',
            r'discordapp\.gift',
            r'free.*nitro',
            r'steam.*community.*gift',
            r'[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+',  # IP addresses
            r'[a-z0-9]{8,}\.tk|ml|ga|cf',  # Suspicious TLDs
        ]
        
        # ูุฌุงูุงุช ุขููุฉ ูุนุฑููุฉ
        self.safe_domains = {
            'discord.com', 'discordapp.com', 'discord.gg',
            'github.com', 'youtube.com', 'youtu.be',
            'google.com', 'stackoverflow.com',
            'wikipedia.org', 'reddit.com'
        }
    
    async def scan_url(self, url: str, guild_id: int) -> Dict:
        """ูุญุต ุฑุงุจุท ุดุงูู"""
        try:
            # ุชูุธูู ุงูุฑุงุจุท
            cleaned_url = self._clean_url(url)
            url_hash = self._hash_url(cleaned_url)
            
            # ุงูุชุญูู ูู ุงููุงุด ุฃููุงู
            cached_result = await self._check_cache(url_hash)
            if cached_result:
                logger.info(f"๐ ุงุณุชุฎุฏุงู ูุชูุฌุฉ ูุญููุธุฉ ููุฑุงุจุท: {cleaned_url[:50]}...")
                return cached_result
            
            # ุจุฏุก ุงููุญุต
            scan_result = {
                'url': cleaned_url,
                'is_safe': True,
                'threat_level': 'safe',
                'threats': [],
                'scan_engines': [],
                'confidence': 0.0,
                'details': {}
            }
            
            # 1. ูุญุต ุฃุณุงุณู ููุฑุงุจุท
            basic_check = await self._basic_url_check(cleaned_url)
            scan_result.update(basic_check)
            
            # 2. ูุญุต ุงูุฃููุงุท ุงููุดุจููุฉ
            pattern_check = self._check_suspicious_patterns(cleaned_url)
            if pattern_check['is_suspicious']:
                scan_result['is_safe'] = False
                scan_result['threat_level'] = 'medium'
                scan_result['threats'].extend(pattern_check['threats'])
            
            # 3. ูุญุต VirusTotal (ุฅุฐุง ูุงู ูุชุงุญ)
            if Config.VIRUSTOTAL_API_KEY:
                vt_result = await self.vt_api.scan_url(cleaned_url)
                if vt_result:
                    scan_result = self._merge_vt_results(scan_result, vt_result)
            
            # 4. ูุญุต ุฅุถุงูู ูููุญุชูู
            content_check = await self._check_url_content(cleaned_url)
            if content_check:
                scan_result = self._merge_content_results(scan_result, content_check)
            
            # ุญูุธ ุงููุชูุฌุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            await self._save_scan_result(url_hash, scan_result)
            
            logger.info(f"๐ ุชู ูุญุต ุงูุฑุงุจุท: {cleaned_url[:50]}... - ุงููุชูุฌุฉ: {scan_result['threat_level']}")
            return scan_result
            
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ูุญุต ุงูุฑุงุจุท {url}: {e}")
            return {
                'url': url,
                'is_safe': False,
                'threat_level': 'unknown',
                'threats': ['scan_error'],
                'error': str(e)
            }
    
    def _clean_url(self, url: str) -> str:
        """ุชูุธูู ูุชุทุจูุน ุงูุฑุงุจุท"""
        # ุฅุฒุงูุฉ ุงููุณุงูุงุช ูุงูุฃุญุฑู ุงูุฎุงุตุฉ
        url = url.strip()
        
        # ุฅุถุงูุฉ http ุฅุฐุง ูู ููู ููุฌูุฏ
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # ุฅุฒุงูุฉ ุงููุนุงููุงุช ุงููุดุจููุฉ
        parsed = urlparse(url)
        clean_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
        
        return clean_url
    
    def _hash_url(self, url: str) -> str:
        """ุฅูุดุงุก hash ููุฑุงุจุท"""
        return hashlib.sha256(url.encode()).hexdigest()
    
    async def _check_cache(self, url_hash: str) -> Optional[Dict]:
        """ุงูุชุญูู ูู ุงููุงุด"""
        # ุงูุชุญูู ูู ุงููุงุด ุงููุญูู
        if url_hash in self.url_cache:
            return self.url_cache[url_hash]
        
        # ุงูุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        db_result = await db_manager.get_scanned_link(url_hash)
        if db_result:
            # ุชุญููู ูุชูุฌุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅูู ุชูุณูู ููุงุณุจ
            result = {
                'url': db_result['original_url'],
                'is_safe': not db_result['is_malicious'],
                'threat_level': 'high' if db_result['is_malicious'] else 'safe',
                'virustotal_score': db_result['virustotal_score'],
                'cached': True
            }
            
            # ุญูุธ ูู ุงููุงุด ุงููุญูู
            self.url_cache[url_hash] = result
            return result
        
        return None
    
    async def _basic_url_check(self, url: str) -> Dict:
        """ูุญุต ุฃุณุงุณู ููุฑุงุจุท"""
        result = {
            'is_safe': True,
            'threat_level': 'safe',
            'threats': []
        }
        
        try:
            # ุงูุชุญูู ูู ุตุญุฉ ุงูุฑุงุจุท
            if not validators.url(url):
                result['is_safe'] = False
                result['threat_level'] = 'high'
                result['threats'].append('invalid_url')
                return result
            
            parsed = urlparse(url)
            domain = parsed.netloc.lower()
            
            # ุงูุชุญูู ูู ุงููุงุฆูุฉ ุงูุณูุฏุงุก
            if domain in self.blacklist:
                result['is_safe'] = False
                result['threat_level'] = 'high'
                result['threats'].append('blacklisted_domain')
            
            # ุงูุชุญูู ูู ุงููุงุฆูุฉ ุงูุจูุถุงุก
            elif domain in self.safe_domains:
                result['threat_level'] = 'safe'
            
            # ูุญุต ุงููุฌุงูุงุช ุงููุดุจููุฉ
            elif self._is_suspicious_domain(domain):
                result['is_safe'] = False
                result['threat_level'] = 'medium'
                result['threats'].append('suspicious_domain')
            
            return result
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงููุญุต ุงูุฃุณุงุณู: {e}")
            return {
                'is_safe': False,
                'threat_level': 'unknown',
                'threats': ['check_error']
            }
    
    def _check_suspicious_patterns(self, url: str) -> Dict:
        """ูุญุต ุงูุฃููุงุท ุงููุดุจููุฉ"""
        threats = []
        
        for pattern in self.suspicious_patterns:
            if re.search(pattern, url, re.IGNORECASE):
                threats.append(f'suspicious_pattern_{pattern[:20]}')
        
        return {
            'is_suspicious': len(threats) > 0,
            'threats': threats
        }
    
    def _is_suspicious_domain(self, domain: str) -> bool:
        """ูุญุต ุงููุฌุงู ููุฎุตุงุฆุต ุงููุดุจููุฉ"""
        # ูุฌุงูุงุช ูุตูุฑุฉ ุฌุฏุงู
        if len(domain) < 4:
            return True
        
        # ูุฌุงูุงุช ุชุญุชูู ุนูู ุฃุฑูุงู ูุซูุฑุฉ
        if len(re.findall(r'\d', domain)) > len(domain) * 0.3:
            return True
        
        # ูุฌุงูุงุช ุนุดูุงุฆูุฉ
        if len(re.findall(r'[a-z]{8,}', domain)) > 0:
            return True
        
        return False
    
    async def _check_url_content(self, url: str) -> Optional[Dict]:
        """ูุญุต ูุญุชูู ุงูุฑุงุจุท"""
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, allow_redirects=False) as response:
                    # ูุญุต ุฑููุฒ ุงูุงุณุชุฌุงุจุฉ ุงููุดุจููุฉ
                    if response.status in [301, 302, 307, 308]:
                        return {
                            'threats': ['suspicious_redirect'],
                            'details': {'redirect_status': response.status}
                        }
                    
                    # ูุญุต headers ูุดุจููุฉ
                    content_type = response.headers.get('content-type', '')
                    if 'application/octet-stream' in content_type:
                        return {
                            'threats': ['suspicious_content_type'],
                            'details': {'content_type': content_type}
                        }
        
        except asyncio.TimeoutError:
            return {
                'threats': ['connection_timeout'],
                'details': {'timeout': True}
            }
        except Exception as e:
            logger.debug(f"ูุง ูููู ูุญุต ูุญุชูู ุงูุฑุงุจุท: {e}")
        
        return None
    
    def _merge_vt_results(self, scan_result: Dict, vt_result: Dict) -> Dict:
        """ุฏูุฌ ูุชุงุฆุฌ VirusTotal"""
        if vt_result.get('malicious_count', 0) > 0:
            scan_result['is_safe'] = False
            scan_result['threat_level'] = 'high'
            scan_result['threats'].extend(vt_result.get('threat_names', []))
        
        scan_result['details']['virustotal'] = vt_result
        scan_result['scan_engines'].extend(vt_result.get('engines', []))
        scan_result['confidence'] = max(scan_result['confidence'], vt_result.get('confidence', 0))
        
        return scan_result
    
    def _merge_content_results(self, scan_result: Dict, content_result: Dict) -> Dict:
        """ุฏูุฌ ูุชุงุฆุฌ ูุญุต ุงููุญุชูู"""
        if content_result.get('threats'):
            scan_result['threats'].extend(content_result['threats'])
            if scan_result['threat_level'] == 'safe':
                scan_result['threat_level'] = 'medium'
                scan_result['is_safe'] = False
        
        scan_result['details']['content_check'] = content_result.get('details', {})
        return scan_result
    
    async def _save_scan_result(self, url_hash: str, scan_result: Dict):
        """ุญูุธ ูุชูุฌุฉ ุงููุญุต"""
        try:
            await db_manager.add_scanned_link(
                url_hash=url_hash,
                original_url=scan_result['url'],
                is_malicious=not scan_result['is_safe'],
                vt_score=scan_result.get('details', {}).get('virustotal', {}).get('malicious_count', 0),
                scan_engines=','.join(scan_result.get('scan_engines', [])),
                threat_names=','.join(scan_result.get('threats', []))
            )
            
            # ุญูุธ ูู ุงููุงุด ุงููุญูู
            self.url_cache[url_hash] = scan_result
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุญูุธ ูุชูุฌุฉ ุงููุญุต: {e}")
    
    def add_to_whitelist(self, domain: str):
        """ุฅุถุงูุฉ ูุฌุงู ูููุงุฆูุฉ ุงูุจูุถุงุก"""
        self.whitelist.add(domain.lower())
        logger.info(f"โ ุชู ุฅุถุงูุฉ {domain} ูููุงุฆูุฉ ุงูุจูุถุงุก")
    
    def add_to_blacklist(self, domain: str):
        """ุฅุถุงูุฉ ูุฌุงู ูููุงุฆูุฉ ุงูุณูุฏุงุก"""
        self.blacklist.add(domain.lower())
        logger.info(f"โ ุชู ุฅุถุงูุฉ {domain} ูููุงุฆูุฉ ุงูุณูุฏุงุก")
    
    def get_stats(self) -> Dict:
        """ุฅุญุตุงุฆูุงุช ุงููุธุงู"""
        return {
            'cached_urls': len(self.url_cache),
            'whitelisted_domains': len(self.whitelist),
            'blacklisted_domains': len(self.blacklist)
        }