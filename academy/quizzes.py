import discord
from discord.ext import commands
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

from config import Config
from core.logger import get_security_logger
from core.database import db_manager

logger = get_security_logger()

class SecurityQuizzes:
    """ูุธุงู ุงูุงุฎุชุจุงุฑุงุช ุงูุฃูููุฉ ุงูุชูุงุนููุฉ"""
    
    def __init__(self):
        self.quizzes = {}
        self.active_quizzes = {}  # ุงููุณุชุฎุฏู -> ูุนูููุงุช ุงูุงุฎุชุจุงุฑ ุงููุดุท
        self.user_scores = {}     # ุงููุณุชุฎุฏู -> ุงูููุงุท
        self.cooldowns = {}       # ุงููุณุชุฎุฏู -> ููุช ุขุฎุฑ ุงุฎุชุจุงุฑ
        
    async def initialize(self):
        """ุชููุฆุฉ ูุธุงู ุงูุงุฎุชุจุงุฑุงุช"""
        try:
            await self._load_quizzes()
            logger.info("โ ุชู ุชููุฆุฉ ูุธุงู ุงูุงุฎุชุจุงุฑุงุช ุงูุฃูููุฉ")
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชููุฆุฉ ูุธุงู ุงูุงุฎุชุจุงุฑุงุช: {e}")
            
    async def _load_quizzes(self):
        """ุชุญููู ุงูุงุฎุชุจุงุฑุงุช"""
        self.quizzes = {
            'basic_security': {
                'title': '๐ ุงุฎุชุจุงุฑ ุงูุฃูุงู ุงูุฃุณุงุณู',
                'description': 'ุงุฎุชุจุฑ ูุนุฑูุชู ุจุฃุณุงุณูุงุช ุงูุฃูุงู ุงูุฑููู',
                'difficulty': 'easy',
                'time_limit': 300,  # 5 ุฏูุงุฆู
                'questions': [
                    {
                        'question': 'ูุง ูู ุฃูุถู ุทุฑููุฉ ูุฅูุดุงุก ูููุฉ ูุฑูุฑ ูููุฉุ',
                        'options': [
                            'ุงุณุชุฎุฏุงู ุงุณูู ูุชุงุฑูุฎ ูููุงุฏู',
                            'ุงุณุชุฎุฏุงู ูุฒูุฌ ูู ุงูุฃุญุฑู ูุงูุฃุฑูุงู ูุงูุฑููุฒ',
                            'ุงุณุชุฎุฏุงู ูููุฉ ูุงุญุฏุฉ ุจุณูุทุฉ',
                            'ุงุณุชุฎุฏุงู ููุณ ูููุฉ ุงููุฑูุฑ ูุฌููุน ุงูุญุณุงุจุงุช'
                        ],
                        'correct': 1,
                        'explanation': 'ูููุฉ ุงููุฑูุฑ ุงููููุฉ ุชุญุชูู ุนูู ูุฒูุฌ ูู ุงูุฃุญุฑู ุงููุจูุฑุฉ ูุงูุตุบูุฑุฉ ูุงูุฃุฑูุงู ูุงูุฑููุฒ'
                    },
                    {
                        'question': 'ูุง ูู ุงูุฎุฏุงุน ุงูุฅููุชุฑููู (Phishing)ุ',
                        'options': [
                            'ููุน ูู ุงูุฃูุนุงุจ ุงูุฅููุชุฑูููุฉ',
                            'ูุญุงููุฉ ุฎุฏุงุน ููุญุตูู ุนูู ูุนูููุงุช ุดุฎุตูุฉ',
                            'ุทุฑููุฉ ูุชุณุฑูุน ุงูุฅูุชุฑูุช',
                            'ุจุฑูุงูุฌ ูุญูุงูุฉ ุงูููุจููุชุฑ'
                        ],
                        'correct': 1,
                        'explanation': 'ุงูุฎุฏุงุน ุงูุฅููุชุฑููู ูู ูุญุงููุฉ ุฎุฏุงุน ุงููุณุชุฎุฏููู ููุญุตูู ุนูู ูุนูููุงุชูู ุงูุดุฎุตูุฉ ุฃู ุงููุงููุฉ'
                    },
                    {
                        'question': 'ูุชู ูุฌุจ ุนููู ุชุญุฏูุซ ุจุฑุงูุฌูุ',
                        'options': [
                            'ูุฑุฉ ูุงุญุฏุฉ ูู ุงูุณูุฉ',
                            'ุนูุฏูุง ุชุชููุฑ ุงูุชุญุฏูุซุงุช ุงูุฃูููุฉ',
                            'ููุท ุนูุฏ ุดุฑุงุก ุฌูุงุฒ ุฌุฏูุฏ',
                            'ูุง ุญุงุฌุฉ ููุชุญุฏูุซ ุฃุจุฏุงู'
                        ],
                        'correct': 1,
                        'explanation': 'ูุฌุจ ุชุญุฏูุซ ุงูุจุฑุงูุฌ ููุฑ ุชููุฑ ุงูุชุญุฏูุซุงุช ุงูุฃูููุฉ ูุญูุงูุฉ ุฌูุงุฒู ูู ุงูุซุบุฑุงุช'
                    },
                    {
                        'question': 'ูุง ูู ุงููุตุงุฏูุฉ ุงูุซูุงุฆูุฉุ',
                        'options': [
                            'ุงุณุชุฎุฏุงู ูููุชู ูุฑูุฑ',
                            'ุทุจูุฉ ุญูุงูุฉ ุฅุถุงููุฉ ุชุชุทูุจ ุฑูุฒ ุชุฃููุฏ',
                            'ููุน ูู ุงูุจุฑุงูุฌ ุงูุถุงุฑุฉ',
                            'ุทุฑููุฉ ูุญูุธ ูููุงุช ุงููุฑูุฑ'
                        ],
                        'correct': 1,
                        'explanation': 'ุงููุตุงุฏูุฉ ุงูุซูุงุฆูุฉ ุชุถูู ุทุจูุฉ ุญูุงูุฉ ุฅุถุงููุฉ ุนุจุฑ ุทูุจ ุฑูุฒ ุชุฃููุฏ ูู ุฌูุงุฒ ุขุฎุฑ'
                    },
                    {
                        'question': 'ุฃูููุง ุฃูุซุฑ ุฃูุงูุงู ููุชุณูู ุงูุฅููุชุฑูููุ',
                        'options': [
                            'ุงูููุงูุน ุงูุชู ุชุจุฏุฃ ุจู http://',
                            'ุงูููุงูุน ุงูุชู ุชุจุฏุฃ ุจู https://',
                            'ูุง ููุฌุฏ ูุฑู',
                            'ุงูููุงูุน ุจุฏูู ุฃู ุจุฑูุชูููู'
                        ],
                        'correct': 1,
                        'explanation': 'ุงูููุงูุน ุงูุชู ุชุจุฏุฃ ุจู https:// ุชุณุชุฎุฏู ุงูุชุดููุฑ ูุญูุงูุฉ ุจูุงูุงุชู ุฃุซูุงุก ุงูููู'
                    }
                ]
            },
            'advanced_security': {
                'title': '๐ก๏ธ ุงุฎุชุจุงุฑ ุงูุฃูุงู ุงููุชูุฏู',
                'description': 'ุงุฎุชุจุงุฑ ูููุณุชุฎุฏููู ุงููุชูุฏููู ูู ุงูุฃูุงู ุงูุฑููู',
                'difficulty': 'hard',
                'time_limit': 600,  # 10 ุฏูุงุฆู
                'questions': [
                    {
                        'question': 'ูุง ูู VPN ููุง ูุงุฆุฏุชูุ',
                        'options': [
                            'ุจุฑูุงูุฌ ูุชุณุฑูุน ุงูุฅูุชุฑูุช',
                            'ุดุจูุฉ ุฎุงุตุฉ ุงูุชุฑุงุถูุฉ ูุญูุงูุฉ ุงูุฎุตูุตูุฉ',
                            'ููุน ูู ุงูููุฑูุณุงุช',
                            'ุทุฑููุฉ ูุญูุธ ุงููููุงุช'
                        ],
                        'correct': 1,
                        'explanation': 'VPN ูุดูุฑ ุงุชุตุงูู ููุฎูู ุนููุงู IP ุงูุฎุงุต ุจู ูุญูุงูุฉ ุฎุตูุตูุชู'
                    },
                    {
                        'question': 'ูุง ูู ุงูุชุดููุฑ ูู ุงูููุงูุฉ ุฅูู ุงูููุงูุฉุ',
                        'options': [
                            'ุชุดููุฑ ูุญูู ุงูุฑุณุงุฆู ูู ุงููุฑุณู ุฅูู ุงููุณุชูุจู ููุท',
                            'ุชุดููุฑ ูุญูู ุงููููุงุช ุนูู ุงููุฑุต ุงูุตูุจ',
                            'ููุน ูู ูููุงุช ุงููุฑูุฑ',
                            'ุทุฑููุฉ ูุถุบุท ุงููููุงุช'
                        ],
                        'correct': 0,
                        'explanation': 'ุงูุชุดููุฑ ูู ุงูููุงูุฉ ุฅูู ุงูููุงูุฉ ูุถูู ุฃู ุงูุฑุณุงูุฉ ูุดูุฑุฉ ูู ุงููุฑุณู ุญุชู ุงููุณุชูุจู'
                    },
                    {
                        'question': 'ูุง ูู Zero-Day Attackุ',
                        'options': [
                            'ูุฌูู ูุญุฏุซ ูู ุงูููู ุงูุฃูู ูู ุงูุดูุฑ',
                            'ูุฌูู ูุณุชุบู ุซุบุฑุฉ ุบูุฑ ูุนุฑููุฉ',
                            'ูุฌูู ุจุฏูู ุงุณุชุฎุฏุงู ุงูุฅูุชุฑูุช',
                            'ูุฌูู ูุณุชุบุฑู ุตูุฑ ุซุงููุฉ'
                        ],
                        'correct': 1,
                        'explanation': 'Zero-Day Attack ูุณุชุบู ุซุบุฑุฉ ุฃูููุฉ ูู ูุชู ุงูุชุดุงููุง ุฃู ุฅุตูุงุญูุง ุจุนุฏ'
                    }
                ]
            },
            'phishing_awareness': {
                'title': '๐ฃ ุงุฎุชุจุงุฑ ุงููุนู ุจุงูุฎุฏุงุน ุงูุฅููุชุฑููู',
                'description': 'ุชุนูู ููููุฉ ุงูุชุดุงู ูุญุงููุงุช ุงูุฎุฏุงุน ุงูุฅููุชุฑููู',
                'difficulty': 'medium',
                'time_limit': 400,  # 6.5 ุฏูููุฉ
                'questions': [
                    {
                        'question': 'ุฃู ูู ูุฐู ุงูุนูุงูุงุช ุชุฏู ุนูู ุฑุณุงูุฉ ุฎุฏุงุน ุฅููุชุฑูููุ',
                        'options': [
                            'ุทูุจ ูุนูููุงุช ุดุฎุตูุฉ ุนุจุฑ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู',
                            'ุฃุฎุทุงุก ุฅููุงุฆูุฉ ููุญููุฉ ูุซูุฑุฉ',
                            'ุฑูุงุจุท ูุดุจููุฉ ุฃู ูุฎุชุตุฑุฉ',
                            'ุฌููุน ูุง ุณุจู'
                        ],
                        'correct': 3,
                        'explanation': 'ุฌููุน ูุฐู ุงูุนูุงูุงุช ุชุฏู ุนูู ูุญุงููุฉ ุฎุฏุงุน ุฅููุชุฑููู ูุญุชููุฉ'
                    },
                    {
                        'question': 'ูุงุฐุง ุชูุนู ุฅุฐุง ุชูููุช ุฑุณุงูุฉ ุชุทูุจ ููู ุชุฃููุฏ ูููุฉ ูุฑูุฑ ุญุณุงุจู ุงููุตุฑููุ',
                        'options': [
                            'ุฃุฑุฏ ุนูู ุงูุฑุณุงูุฉ ุจูููุฉ ุงููุฑูุฑ',
                            'ุฃุชุฌุงูู ุงูุฑุณุงูุฉ ูุฃุชุตู ุจุงูุจูู ูุจุงุดุฑุฉ',
                            'ุฃููุฑ ุนูู ุงูุฑุงุจุท ูุฃุฏุฎู ุงููุนูููุงุช',
                            'ุฃุญูู ุงูุฑุณุงูุฉ ูุฃุตุฏูุงุฆู'
                        ],
                        'correct': 1,
                        'explanation': 'ุงูุจููู ูุง ุชุทูุจ ุฃุจุฏุงู ูุนูููุงุช ุญุณุงุณุฉ ุนุจุฑ ุงูุจุฑูุฏ ุงูุฅููุชุฑูููุ ุงุชุตู ุจูู ูุจุงุดุฑุฉ'
                    }
                ]
            }
        }
        
    async def get_available_quizzes(self) -> discord.Embed:
        """ุงูุญุตูู ุนูู ูุงุฆูุฉ ุงูุงุฎุชุจุงุฑุงุช ุงููุชุงุญุฉ"""
        embed = discord.Embed(
            title="๐ ุงูุงุฎุชุจุงุฑุงุช ุงููุชุงุญุฉ",
            description="ุงุฎุชุฑ ุงุฎุชุจุงุฑุงู ูุชูููู ูุนุฑูุชู ุงูุฃูููุฉ",
            color=Config.COLORS['info']
        )
        
        for quiz_id, quiz in self.quizzes.items():
            difficulty_emoji = {
                'easy': '๐ข',
                'medium': '๐ก', 
                'hard': '๐ด'
            }.get(quiz['difficulty'], 'โช')
            
            embed.add_field(
                name=f"{difficulty_emoji} {quiz['title']}",
                value=f"{quiz['description']}\n๐ ุงูุตุนูุจุฉ: {quiz['difficulty']}\nโฑ๏ธ ุงูููุช: {quiz['time_limit']//60} ุฏูุงุฆู\nโ ุงูุฃุณุฆูุฉ: {len(quiz['questions'])}",
                inline=False
            )
            
        return embed
        
    async def start_quiz(self, user_id: int, quiz_id: str) -> discord.Embed:
        """ุจุฏุก ุงุฎุชุจุงุฑ"""
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุงุฎุชุจุงุฑ
        if quiz_id not in self.quizzes:
            return discord.Embed(
                title="โ ุฎุทุฃ",
                description="ุงูุงุฎุชุจุงุฑ ุบูุฑ ููุฌูุฏ",
                color=Config.COLORS['error']
            )
            
        # ุงูุชุญูู ูู ูุชุฑุฉ ุงูุงูุชุธุงุฑ
        if await self._is_on_cooldown(user_id):
            remaining = await self._get_cooldown_remaining(user_id)
            return discord.Embed(
                title="โฐ ุงูุชุธุฑ ููููุงู",
                description=f"ููููู ุฅุฌุฑุงุก ุงุฎุชุจุงุฑ ุขุฎุฑ ุจุนุฏ {remaining} ุซุงููุฉ",
                color=Config.COLORS['warning']
            )
            
        # ุงูุชุญูู ูู ูุฌูุฏ ุงุฎุชุจุงุฑ ูุดุท
        if user_id in self.active_quizzes:
            return discord.Embed(
                title="๐ ุงุฎุชุจุงุฑ ูุดุท",
                description="ูุฏูู ุงุฎุชุจุงุฑ ูุดุท ุจุงููุนู. ุฃูููู ุฃููุงู ุฃู ุงุณุชุฎุฏู `!quiz_cancel` ูุฅูุบุงุฆู",
                color=Config.COLORS['warning']
            )

        # ุฅูุดุงุก ุงุฎุชุจุงุฑ ุฌุฏูุฏ
        quiz_data = self.quizzes.get(quiz_id)
        if not quiz_data:
            return discord.Embed(
                title="โ ุฎุทุฃ",
                description="ููุน ุงูุงุฎุชุจุงุฑ ุบูุฑ ุตุงูุญ",
                color=Config.COLORS['error']
            )

        # ุจุฏุก ุงูุงุฎุชุจุงุฑ
        self.active_quizzes[user_id] = {
            'quiz_type': quiz_id,
            'current_question': 0,
            'correct_answers': 0,
            'start_time': datetime.now(),
            'time_limit': quiz_data['time_limit']
        }

        return self._create_question_embed(user_id)