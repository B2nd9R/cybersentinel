import discord
from discord.ext import commands
import json
import random
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path

from config import Config
from core.logger import get_security_logger
from core.database import db_manager

logger = get_security_logger()

class SecurityEducation:
    """ูุธุงู ุงูุชุนููู ุงูุฃููู ุงูุชูุงุนูู"""
    
    def __init__(self):
        self.education_data = {}
        self.user_progress = {}
        self.courses = {}
        
    async def initialize(self):
        """ุชููุฆุฉ ูุธุงู ุงูุชุนููู"""
        try:
            await self._load_education_content()
            await self._setup_courses()
            logger.info("โ ุชู ุชููุฆุฉ ูุธุงู ุงูุชุนููู ุงูุฃููู")
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชููุฆุฉ ูุธุงู ุงูุชุนููู: {e}")
            
    async def _load_education_content(self):
        """ุชุญููู ุงููุญุชูู ุงูุชุนูููู"""
        self.education_data = {
            'courses': {
                'basic_security': {
                    'title': '๐ ุฃุณุงุณูุงุช ุงูุฃูุงู ุงูุฑููู',
                    'description': 'ุชุนูู ุงูุฃุณุงุณูุงุช ุงููููุฉ ูุญูุงูุฉ ููุณู ุนูู ุงูุฅูุชุฑูุช',
                    'lessons': [
                        {
                            'id': 'passwords',
                            'title': 'ูููุงุช ุงููุฑูุฑ ุงููููุฉ',
                            'content': 'ููููุฉ ุฅูุดุงุก ูููุงุช ูุฑูุฑ ูููุฉ ูุขููุฉ',
                            'duration': 10
                        },
                        {
                            'id': 'phishing',
                            'title': 'ุงูุชุนุฑู ุนูู ุงูุฎุฏุงุน ุงูุฅููุชุฑููู',
                            'content': 'ููููุฉ ุงูุชุดุงู ุฑุณุงุฆู ุงูุฎุฏุงุน ูุงูููุงูุน ุงููุฒููุฉ',
                            'duration': 15
                        },
                        {
                            'id': 'social_media',
                            'title': 'ุฃูุงู ูุณุงุฆู ุงูุชูุงุตู',
                            'content': 'ุญูุงูุฉ ุญุณุงุจุงุชู ุนูู ููุตุงุช ุงูุชูุงุตู ุงูุงุฌุชูุงุนู',
                            'duration': 12
                        }
                    ]
                },
                'advanced_security': {
                    'title': '๐ก๏ธ ุงูุฃูุงู ุงููุชูุฏู',
                    'description': 'ููุงุถูุน ูุชูุฏูุฉ ูู ุงูุฃูุงู ุงูุฑููู',
                    'lessons': [
                        {
                            'id': 'encryption',
                            'title': 'ุงูุชุดููุฑ ูุงูุฎุตูุตูุฉ',
                            'content': 'ููู ุฃุณุงุณูุงุช ุงูุชุดููุฑ ูุญูุงูุฉ ุงูุจูุงูุงุช',
                            'duration': 20
                        },
                        {
                            'id': 'network_security',
                            'title': 'ุฃูุงู ุงูุดุจูุงุช',
                            'content': 'ุญูุงูุฉ ุงุชุตุงูุงุชู ูุดุจูุงุชู ุงูููุฒููุฉ',
                            'duration': 25
                        }
                    ]
                }
            },
            'tips': {
                'daily': [
                    '๐ ุงุณุชุฎุฏู ูููุฉ ูุฑูุฑ ูุฎุชููุฉ ููู ุญุณุงุจ',
                    '๐ ุชุญูู ูู ุงูุฑูุงุจุท ูุจู ุงูููุฑ ุนูููุง',
                    '๐ฑ ูุนูู ุงููุตุงุฏูุฉ ุงูุซูุงุฆูุฉ ุนูู ุฌููุน ุญุณุงุจุงุชู',
                    '๐ซ ูุง ุชุดุงุฑู ูุนูููุงุชู ุงูุดุฎุตูุฉ ูุน ุงูุบุฑุจุงุก',
                    '๐ป ุญุฏูุซ ุจุฑุงูุฌู ููุธุงู ุงูุชุดุบูู ุจุงูุชุธุงู'
                ]
            }
        }
        
    async def _setup_courses(self):
        """ุฅุนุฏุงุฏ ุงูุฏูุฑุงุช ุงูุชุนููููุฉ"""
        self.courses = self.education_data['courses']
        
    async def get_course_list(self) -> discord.Embed:
        """ุงูุญุตูู ุนูู ูุงุฆูุฉ ุงูุฏูุฑุงุช ุงููุชุงุญุฉ"""
        embed = discord.Embed(
            title="๐ ุงูุฏูุฑุงุช ุงูุชุนููููุฉ ุงููุชุงุญุฉ",
            description="ุงุฎุชุฑ ุฏูุฑุฉ ูุจุฏุก ุงูุชุนูู",
            color=Config.COLORS['info']
        )
        
        for course_id, course in self.courses.items():
            lessons_count = len(course['lessons'])
            total_duration = sum(lesson['duration'] for lesson in course['lessons'])
            
            embed.add_field(
                name=course['title'],
                value=f"{course['description']}\n๐ {lessons_count} ุฏุฑูุณ | โฑ๏ธ {total_duration} ุฏูููุฉ",
                inline=False
            )
            
        return embed
        
    async def start_course(self, user_id: int, course_id: str) -> discord.Embed:
        """ุจุฏุก ุฏูุฑุฉ ุชุนููููุฉ"""
        if course_id not in self.courses:
            return discord.Embed(
                title="โ ุฎุทุฃ",
                description="ุงูุฏูุฑุฉ ุบูุฑ ููุฌูุฏุฉ",
                color=Config.COLORS['error']
            )
            
        course = self.courses[course_id]
        
        # ุชุณุฌูู ุจุฏุงูุฉ ุงูุฏูุฑุฉ
        if user_id not in self.user_progress:
            self.user_progress[user_id] = {}
            
        self.user_progress[user_id][course_id] = {
            'started_at': datetime.now(),
            'current_lesson': 0,
            'completed_lessons': [],
            'status': 'in_progress'
        }
        
        embed = discord.Embed(
            title=f"๐ ุจุฏุก ุงูุฏูุฑุฉ: {course['title']}",
            description=course['description'],
            color=Config.COLORS['success']
        )
        
        first_lesson = course['lessons'][0]
        embed.add_field(
            name="๐ ุงูุฏุฑุณ ุงูุฃูู",
            value=f"**{first_lesson['title']}**\n{first_lesson['content']}",
            inline=False
        )
        
        embed.add_field(
            name="โฑ๏ธ ุงููุฏุฉ ุงููุชููุนุฉ",
            value=f"{first_lesson['duration']} ุฏูููุฉ",
            inline=True
        )
        
        return embed
        
    async def get_lesson(self, user_id: int, course_id: str, lesson_index: int) -> discord.Embed:
        """ุงูุญุตูู ุนูู ุฏุฑุณ ูุนูู"""
        if course_id not in self.courses:
            return discord.Embed(
                title="โ ุฎุทุฃ",
                description="ุงูุฏูุฑุฉ ุบูุฑ ููุฌูุฏุฉ",
                color=Config.COLORS['error']
            )
            
        course = self.courses[course_id]
        
        if lesson_index >= len(course['lessons']):
            return discord.Embed(
                title="๐ ุชูุงูููุง!",
                description="ููุฏ ุฃูููุช ุฌููุน ุฏุฑูุณ ูุฐู ุงูุฏูุฑุฉ",
                color=Config.COLORS['success']
            )
            
        lesson = course['lessons'][lesson_index]
        
        embed = discord.Embed(
            title=f"๐ {lesson['title']}",
            description=lesson['content'],
            color=Config.COLORS['info']
        )
        
        embed.add_field(
            name="๐ ุงูุชูุฏู",
            value=f"ุงูุฏุฑุณ {lesson_index + 1} ูู {len(course['lessons'])}",
            inline=True
        )
        
        embed.add_field(
            name="โฑ๏ธ ุงููุฏุฉ",
            value=f"{lesson['duration']} ุฏูููุฉ",
            inline=True
        )
        
        return embed
        
    async def complete_lesson(self, user_id: int, course_id: str, lesson_index: int) -> discord.Embed:
        """ุฅููุงู ุฏุฑุณ"""
        if user_id not in self.user_progress:
            self.user_progress[user_id] = {}
            
        if course_id not in self.user_progress[user_id]:
            self.user_progress[user_id][course_id] = {
                'started_at': datetime.now(),
                'current_lesson': 0,
                'completed_lessons': [],
                'status': 'in_progress'
            }
            
        progress = self.user_progress[user_id][course_id]
        
        if lesson_index not in progress['completed_lessons']:
            progress['completed_lessons'].append(lesson_index)
            progress['current_lesson'] = lesson_index + 1
            
        course = self.courses[course_id]
        total_lessons = len(course['lessons'])
        completed_count = len(progress['completed_lessons'])
        
        embed = discord.Embed(
            title="โ ุชู ุฅููุงู ุงูุฏุฑุณ!",
            description=f"ุฃุญุณูุช! ููุฏ ุฃูููุช ุงูุฏุฑุณ ุจูุฌุงุญ",
            color=Config.COLORS['success']
        )
        
        embed.add_field(
            name="๐ ุงูุชูุฏู ุงูุฅุฌูุงูู",
            value=f"{completed_count}/{total_lessons} ุฏุฑูุณ ููุชููุฉ ({completed_count/total_lessons*100:.1f}%)",
            inline=False
        )
        
        # ุฅุฐุง ุงูุชูู ุฌููุน ุงูุฏุฑูุณ
        if completed_count == total_lessons:
            progress['status'] = 'completed'
            progress['completed_at'] = datetime.now()
            
            embed.add_field(
                name="๐ ุชูุงูููุง!",
                value="ููุฏ ุฃูููุช ุงูุฏูุฑุฉ ุจุงููุงูู! ุญุตูุช ุนูู ุดูุงุฏุฉ ุฅุชูุงู",
                inline=False
            )
            
        return embed
        
    async def get_user_progress(self, user_id: int) -> discord.Embed:
        """ุงูุญุตูู ุนูู ุชูุฏู ุงููุณุชุฎุฏู"""
        embed = discord.Embed(
            title="๐ ุชูุฏูู ุงูุชุนูููู",
            description="ุฅููู ููุฎุต ุชูุฏูู ูู ุงูุฏูุฑุงุช",
            color=Config.COLORS['info']
        )
        
        if user_id not in self.user_progress or not self.user_progress[user_id]:
            embed.add_field(
                name="๐ ูู ุชุจุฏุฃ ุฃู ุฏูุฑุฉ ุจุนุฏ",
                value="ุงุณุชุฎุฏู `!courses` ูุฑุคูุฉ ุงูุฏูุฑุงุช ุงููุชุงุญุฉ",
                inline=False
            )
            return embed
            
        for course_id, progress in self.user_progress[user_id].items():
            if course_id in self.courses:
                course = self.courses[course_id]
                total_lessons = len(course['lessons'])
                completed_count = len(progress['completed_lessons'])
                
                status_emoji = "โ" if progress['status'] == 'completed' else "๐"
                progress_percent = completed_count / total_lessons * 100
                
                embed.add_field(
                    name=f"{status_emoji} {course['title']}",
                    value=f"ุงูุชูุฏู: {completed_count}/{total_lessons} ({progress_percent:.1f}%)\nุงูุญุงูุฉ: {progress['status']}",
                    inline=True
                )
                
        return embed
        
    async def get_daily_tip(self) -> str:
        """ุงูุญุตูู ุนูู ูุตูุญุฉ ููููุฉ"""
        tips = self.education_data['tips']['daily']
        return random.choice(tips)
        
    async def search_content(self, query: str) -> discord.Embed:
        """ุงูุจุญุซ ูู ุงููุญุชูู ุงูุชุนูููู"""
        results = []
        query_lower = query.lower()
        
        for course_id, course in self.courses.items():
            # ุงูุจุญุซ ูู ุนููุงู ุงูุฏูุฑุฉ
            if query_lower in course['title'].lower() or query_lower in course['description'].lower():
                results.append({
                    'type': 'course',
                    'title': course['title'],
                    'description': course['description'],
                    'id': course_id
                })
                
            # ุงูุจุญุซ ูู ุงูุฏุฑูุณ
            for lesson in course['lessons']:
                if query_lower in lesson['title'].lower() or query_lower in lesson['content'].lower():
                    results.append({
                        'type': 'lesson',
                        'title': lesson['title'],
                        'description': lesson['content'][:100] + '...',
                        'course': course['title']
                    })
                    
        embed = discord.Embed(
            title=f"๐ ูุชุงุฆุฌ ุงูุจุญุซ: {query}",
            color=Config.COLORS['info']
        )
        
        if not results:
            embed.description = "ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุงุฆุฌ"
        else:
            for i, result in enumerate(results[:5]):  # ุฃูู 5 ูุชุงุฆุฌ
                if result['type'] == 'course':
                    embed.add_field(
                        name=f"๐ {result['title']}",
                        value=result['description'],
                        inline=False
                    )
                else:
                    embed.add_field(
                        name=f"๐ {result['title']}",
                        value=f"ูู ุฏูุฑุฉ: {result['course']}\n{result['description']}",
                        inline=False
                    )
                    
        return embed