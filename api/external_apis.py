"""
External APIs Manager
ูุฏูุฑ ุงูู APIs ุงูุฎุงุฑุฌูุฉ - ูุฏูุฑ ุฌููุน ุงูุชูุงููุงุช ูุน ุงูุฎุฏูุงุช ุงูุฎุงุฑุฌูุฉ
"""

import asyncio
import aiohttp
import json
from typing import Dict, List, Optional, Any
from urllib.parse import urlparse, quote
from datetime import datetime, timedelta

from config import Config
from core.logger import get_security_logger
from .virustotal import VirusTotalAPI

logger = get_security_logger()

class ExternalAPIManager:
    """ูุฏูุฑ ุงูู APIs ุงูุฎุงุฑุฌูุฉ"""
    
    def __init__(self):
        self.virustotal = VirusTotalAPI()
        self.session = None
        
        # ุฅุนุฏุงุฏุงุช ุงูุทูุจุงุช
        self.timeout = aiohttp.ClientTimeout(total=30)
        self.headers = {
            'User-Agent': 'CyberSentinel-Bot/1.0 Security Scanner'
        }
        
        # ูุงุด ูููุชุงุฆุฌ
        self.cache = {
            'url_reputation': {},
            'domain_info': {},
            'ip_geolocation': {}
        }
        
        # ููุงุฆู ุงูุญูุงูุฉ
        self.threat_intelligence = {
            'malware_domains': set(),
            'phishing_urls': set(),
            'suspicious_ips': set(),
            'safe_domains': set()
        }
    
    async def initialize(self):
        """ุชููุฆุฉ ุงููุฏูุฑ ูุงูู APIs"""
        try:
            # ุฅูุดุงุก ุฌูุณุฉ HTTP
            self.session = aiohttp.ClientSession(
                timeout=self.timeout,
                headers=self.headers
            )
            
            # ุชููุฆุฉ VirusTotal
            await self.virustotal.initialize()
            
            # ุชุญููู ููุงุฆู ุงูุชูุฏูุฏุงุช
            await self._load_threat_intelligence()
            
            logger.info("โ ุชู ุชููุฆุฉ ูุฏูุฑ ุงูู APIs ุงูุฎุงุฑุฌูุฉ")
            return True
            
        except Exception as e:
            logger.error(f"โ ุฎุทุฃ ูู ุชููุฆุฉ ูุฏูุฑ ุงูู APIs: {e}")
            return False
    
    async def close(self):
        """ุฅุบูุงู ุงูุฌูุณุงุช"""
        if self.session:
            await self.session.close()
        
        if self.virustotal:
            await self.virustotal.close()
    
    async def comprehensive_url_scan(self, url: str) -> Dict:
        """ูุญุต ุดุงูู ููุฑุงุจุท ุจุงุณุชุฎุฏุงู ุนุฏุฉ ูุตุงุฏุฑ"""
        scan_result = {
            'url': url,
            'is_safe': True,
            'threat_level': 'safe',
            'confidence': 0.0,
            'sources': [],
            'threats_detected': [],
            'scan_timestamp': datetime.now().isoformat()
        }
        
        try:
            # 1. ูุญุต VirusTotal
            vt_result = await self.virustotal.scan_url(url)
            if vt_result:
                scan_result['sources'].append('virustotal')
                if vt_result.get('is_malicious', False):
                    scan_result['is_safe'] = False
                    scan_result['threat_level'] = 'high'
                    scan_result['threats_detected'].extend(vt_result.get('threat_names', []))
                    scan_result['confidence'] += 0.4
            
            # 2. ูุญุต ููุงุฆู ุงูุชูุฏูุฏุงุช ุงููุญููุฉ
            local_check = await self._check_local_threat_lists(url)
            if local_check['is_threat']:
                scan_result['is_safe'] = False
                scan_result['threat_level'] = local_check['severity']
                scan_result['threats_detected'].append(local_check['threat_type'])
                scan_result['confidence'] += 0.3
                scan_result['sources'].append('local_intelligence')
            
            # 3. ูุญุต ุณูุนุฉ ุงููุทุงู
            domain_rep = await self._check_domain_reputation(url)
            if domain_rep:
                scan_result['sources'].append('domain_reputation')
                if domain_rep.get('is_suspicious', False):
                    scan_result['is_safe'] = False
                    scan_result['threat_level'] = 'medium'
                    scan_result['confidence'] += 0.2
            
            # 4. ูุญุต ุงูู IP Geolocation
            ip_info = await self._get_ip_geolocation(url)
            if ip_info and ip_info.get('is_suspicious', False):
                scan_result['sources'].append('ip_geolocation')
                scan_result['threats_detected'].append('suspicious_location')
                scan_result['confidence'] += 0.1
            
            # ุชุญุฏูุฏ ูุณุชูู ุงูุซูุฉ ุงูููุงุฆู
            scan_result['confidence'] = min(scan_result['confidence'], 1.0)
            
            # ุชุญุฏูุฏ ูุณุชูู ุงูุชูุฏูุฏ ุจูุงุกู ุนูู ุงูุซูุฉ
            if scan_result['confidence'] >= 0.7:
                scan_result['threat_level'] = 'high'
            elif scan_result['confidence'] >= 0.4:
                scan_result['threat_level'] = 'medium'
            elif scan_result['confidence'] >= 0.2:
                scan_result['threat_level'] = 'low'
            
            logger.info(f"๐ ูุญุต ุดุงูู ููุฑุงุจุท {url[:50]}... - ุงููุชูุฌุฉ: {scan_result['threat_level']}")
            return scan_result
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงููุญุต ุงูุดุงูู ููุฑุงุจุท {url}: {e}")
            return scan_result
    
    async def check_file_reputation(self, file_hash: str, file_name: str = None) -> Dict:
        """ูุญุต ุณูุนุฉ ุงูููู"""
        try:
            # ูุญุต VirusTotal
            vt_result = await self.virustotal.scan_file_hash(file_hash)
            
            result = {
                'file_hash': file_hash,
                'file_name': file_name,
                'is_malicious': False,
                'threat_level': 'safe',
                'scan_engines': 0,
                'positive_detections': 0
            }
            
            if vt_result:
                result.update(vt_result)
                if vt_result.get('positive_detections', 0) > 0:
                    result['is_malicious'] = True
                    if vt_result['positive_detections'] >= 5:
                        result['threat_level'] = 'high'
                    elif vt_result['positive_detections'] >= 2:
                        result['threat_level'] = 'medium'
                    else:
                        result['threat_level'] = 'low'
            
            return result
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุญุต ุณูุนุฉ ุงูููู {file_hash}: {e}")
            return {'file_hash': file_hash, 'is_malicious': False}
    
    async def get_domain_intelligence(self, domain: str) -> Dict:
        """ุงูุญุตูู ุนูู ูุนูููุงุช ุงุณุชุฎุจุงุฑุงุชูุฉ ุนู ุงููุทุงู"""
        try:
            # ุงูุชุญูู ูู ุงููุงุด ุฃููุงู
            if domain in self.cache['domain_info']:
                cached_data = self.cache['domain_info'][domain]
                if self._is_cache_valid(cached_data['timestamp']):
                    return cached_data['data']
            
            intelligence = {
                'domain': domain,
                'is_suspicious': False,
                'age_days': None,
                'registrar': None,
                'country': None,
                'threat_categories': [],
                'reputation_score': 0
            }
            
            # ูุญุต VirusTotal ูููุทุงู
            vt_domain = await self.virustotal.get_domain_report(domain)
            if vt_domain:
                intelligence.update(vt_domain)
                if vt_domain.get('is_malicious', False):
                    intelligence['is_suspicious'] = True
                    intelligence['threat_categories'].append('malware')
            
            # ูุญุต ููุงุฆู ุงูุชูุฏูุฏุงุช
            if domain in self.threat_intelligence['malware_domains']:
                intelligence['is_suspicious'] = True
                intelligence['threat_categories'].append('known_malware')
            
            # ุญูุธ ูู ุงููุงุด
            self.cache['domain_info'][domain] = {
                'data': intelligence,
                'timestamp': datetime.now()
            }
            
            return intelligence
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ูุนูููุงุช ุงููุทุงู {domain}: {e}")
            return {'domain': domain, 'is_suspicious': False}
    
    async def _check_local_threat_lists(self, url: str) -> Dict:
        """ูุญุต ููุงุฆู ุงูุชูุฏูุฏุงุช ุงููุญููุฉ"""
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc.lower()
            
            # ูุญุต ุงููุทุงูุงุช ุงูุฎุจูุซุฉ
            if domain in self.threat_intelligence['malware_domains']:
                return {
                    'is_threat': True,
                    'threat_type': 'malware_domain',
                    'severity': 'high'
                }
            
            # ูุญุต ุฑูุงุจุท ุงูุชุตูุฏ
            if url.lower() in self.threat_intelligence['phishing_urls']:
                return {
                    'is_threat': True,
                    'threat_type': 'phishing_url',
                    'severity': 'high'
                }
            
            # ูุญุต ุงููุทุงูุงุช ุงูุขููุฉ
            if domain in self.threat_intelligence['safe_domains']:
                return {
                    'is_threat': False,
                    'threat_type': 'safe_domain',
                    'severity': 'safe'
                }
            
            return {'is_threat': False}
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุญุต ููุงุฆู ุงูุชูุฏูุฏุงุช: {e}")
            return {'is_threat': False}
    
    async def _check_domain_reputation(self, url: str) -> Optional[Dict]:
        """ูุญุต ุณูุนุฉ ุงููุทุงู"""
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            
            # ูููู ุฅุถุงูุฉ ุชูุงูู ูุน ุฎุฏูุงุช ุฃุฎุฑู ููุง
            # ูุซู Cisco Umbrella, OpenDNS, etc.
            
            # ูุญุต ุฃุณุงุณู ูููุทุงู
            reputation = {
                'domain': domain,
                'is_suspicious': False,
                'reputation_score': 50,  # ููุทุฉ ูุญุงูุฏุฉ
                'categories': []
            }
            
            # ูุญุต ุฃููุงุท ุงููุทุงูุงุช ุงููุดุจููุฉ
            suspicious_patterns = [
                r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}',  # IP addresses
                r'.*\.tk$|.*\.ml$|.*\.ga$|.*\.cf$',  # Suspicious TLDs
                r'.*discord.*gift.*|.*nitro.*free.*',  # Discord scams
            ]
            
            import re
            for pattern in suspicious_patterns:
                if re.match(pattern, domain, re.IGNORECASE):
                    reputation['is_suspicious'] = True
                    reputation['reputation_score'] = 10
                    reputation['categories'].append('suspicious_pattern')
                    break
            
            return reputation
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุญุต ุณูุนุฉ ุงููุทุงู: {e}")
            return None
    
    async def _get_ip_geolocation(self, url: str) -> Optional[Dict]:
        """ุงูุญุตูู ุนูู ูุนูููุงุช ุงููููุน ุงูุฌุบุฑุงูู ููู IP"""
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            
            # ูููู ุงุณุชุฎุฏุงู ุฎุฏูุงุช ูุฌุงููุฉ ูุซู ipapi.co
            # ูุฐุง ูุซุงู ุฃุณุงุณู
            
            import socket
            ip = socket.gethostbyname(domain)
            
            # ูุญุต ุงูู IPs ุงููุดุจููุฉ
            if ip in self.threat_intelligence['suspicious_ips']:
                return {
                    'ip': ip,
                    'is_suspicious': True,
                    'reason': 'known_malicious_ip'
                }
            
            return {
                'ip': ip,
                'is_suspicious': False
            }
            
        except Exception as e:
            logger.debug(f"ูุง ูููู ุงูุญุตูู ุนูู ูุนูููุงุช ุงูู IP ูููุทุงู: {e}")
            return None
    
    async def _load_threat_intelligence(self):
        """ุชุญููู ููุงุฆู ุงูุชูุฏูุฏุงุช"""
        try:
            # ุชุญููู ูู ูููุงุช ูุญููุฉ ุฃู APIs ุฎุงุฑุฌูุฉ
            # ูุฐุง ูุซุงู ุฃุณุงุณู
            
            # ูุทุงูุงุช ุฎุจูุซุฉ ูุนุฑููุฉ
            known_malware_domains = {
                'malware.com', 'phishing-site.net', 'fake-discord.com'
            }
            self.threat_intelligence['malware_domains'].update(known_malware_domains)
            
            # ูุทุงูุงุช ุขููุฉ
            safe_domains = {
                'discord.com', 'discordapp.com', 'discord.gg',
                'github.com', 'google.com', 'youtube.com',
                'stackoverflow.com', 'reddit.com'
            }
            self.threat_intelligence['safe_domains'].update(safe_domains)
            
            logger.info("โ ุชู ุชุญููู ููุงุฆู ุงูุชูุฏูุฏุงุช")
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุชุญููู ููุงุฆู ุงูุชูุฏูุฏุงุช: {e}")
    
    def _is_cache_valid(self, timestamp: datetime, max_age_hours: int = 24) -> bool:
        """ุงูุชุญูู ูู ุตุญุฉ ุงููุงุด"""
        return datetime.now() - timestamp < timedelta(hours=max_age_hours)
    
    async def update_threat_intelligence(self):
        """ุชุญุฏูุซ ููุงุฆู ุงูุชูุฏูุฏุงุช"""
        try:
            # ูููู ุชุญุฏูุซ ุงูููุงุฆู ูู ูุตุงุฏุฑ ุฎุงุฑุฌูุฉ
            # ูุซู threat intelligence feeds
            
            logger.info("๐ ุชู ุชุญุฏูุซ ููุงุฆู ุงูุชูุฏูุฏุงุช")
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุชุญุฏูุซ ููุงุฆู ุงูุชูุฏูุฏุงุช: {e}")
    
    async def get_api_status(self) -> Dict:
        """ุงูุญุตูู ุนูู ุญุงูุฉ ุฌููุน ุงูู APIs"""
        try:
            status = {
                'virustotal': {
                    'available': bool(Config.VIRUSTOTAL_API_KEY),
                    'status': 'unknown',
                    'quota_remaining': None,
                    'last_check': None
                },
                'external_apis': {
                    'session_active': self.session is not None,
                    'cache_size': {
                        'url_reputation': len(self.cache['url_reputation']),
                        'domain_info': len(self.cache['domain_info']),
                        'ip_geolocation': len(self.cache['ip_geolocation'])
                    },
                    'threat_intelligence': {
                        'malware_domains': len(self.threat_intelligence['malware_domains']),
                        'phishing_urls': len(self.threat_intelligence['phishing_urls']),
                        'suspicious_ips': len(self.threat_intelligence['suspicious_ips']),
                        'safe_domains': len(self.threat_intelligence['safe_domains'])
                    }
                }
            }
            
            # ูุญุต ุญุงูุฉ VirusTotal
            if Config.VIRUSTOTAL_API_KEY:
                vt_status = await self.virustotal.get_api_status()
                if vt_status:
                    status['virustotal'].update(vt_status)
                    status['virustotal']['status'] = 'active'
                else:
                    status['virustotal']['status'] = 'error'
            else:
                status['virustotal']['status'] = 'no_api_key'
            
            return status
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุญุงูุฉ ุงูู APIs: {e}")
            return {'error': str(e)}
    
    async def bulk_url_scan(self, urls: List[str]) -> Dict[str, Dict]:
        """ูุญุต ูุฌููุนุฉ ูู ุงูุฑูุงุจุท"""
        results = {}
        
        try:
            # ูุญุต ุงูุฑูุงุจุท ุจุดูู ูุชูุงุฒู ูุน ุญุฏ ุฃูุตู ููุทูุจุงุช ุงููุชุฒุงููุฉ
            semaphore = asyncio.Semaphore(5)  # ุญุฏ ุฃูุตู 5 ุทูุจุงุช ูุชุฒุงููุฉ
            
            async def scan_single_url(url: str):
                async with semaphore:
                    return await self.comprehensive_url_scan(url)
            
            # ุชุดุบูู ุงููุญุต ุงููุชูุงุฒู
            tasks = [scan_single_url(url) for url in urls]
            scan_results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # ุชุฌููุน ุงููุชุงุฆุฌ
            for i, url in enumerate(urls):
                if isinstance(scan_results[i], Exception):
                    results[url] = {
                        'error': str(scan_results[i]),
                        'is_safe': True,  # ุงูุชุฑุงุถ ุงูุฃูุงู ูู ุญุงูุฉ ุงูุฎุทุฃ
                        'threat_level': 'unknown'
                    }
                else:
                    results[url] = scan_results[i]
            
            logger.info(f"๐ ุชู ูุญุต {len(urls)} ุฑุงุจุท ุจุดูู ูุฌูุน")
            return results
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงููุญุต ุงููุฌูุน ููุฑูุงุจุท: {e}")
            return {url: {'error': str(e), 'is_safe': True} for url in urls}
    
    async def get_threat_statistics(self) -> Dict:
        """ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุชูุฏูุฏุงุช"""
        try:
            stats = {
                'total_scans_today': 0,
                'threats_detected_today': 0,
                'top_threat_types': {},
                'cache_hit_rate': 0.0,
                'api_calls_today': {
                    'virustotal': 0,
                    'domain_reputation': 0,
                    'ip_geolocation': 0
                },
                'threat_intelligence_stats': {
                    'last_update': None,
                    'sources_count': len(self.threat_intelligence),
                    'total_entries': sum(len(v) for v in self.threat_intelligence.values())
                }
            }
            
            # ูููู ุฅุถุงูุฉ ููุทู ูุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            # ุฃู ูู ูููุงุช ุงูุณุฌูุงุช
            
            return stats
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงูุชูุฏูุฏุงุช: {e}")
            return {}
    
    async def clear_cache(self, cache_type: str = 'all'):
        """ูุณุญ ุงููุงุด"""
        try:
            if cache_type == 'all':
                self.cache = {
                    'url_reputation': {},
                    'domain_info': {},
                    'ip_geolocation': {}
                }
                logger.info("๐๏ธ ุชู ูุณุญ ุฌููุน ุงููุงุด")
            elif cache_type in self.cache:
                self.cache[cache_type] = {}
                logger.info(f"๐๏ธ ุชู ูุณุญ ูุงุด {cache_type}")
            else:
                logger.warning(f"ููุน ูุงุด ุบูุฑ ูุนุฑูู: {cache_type}")
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ูุณุญ ุงููุงุด: {e}")
    
    async def add_to_threat_list(self, threat_type: str, value: str):
        """ุฅุถุงูุฉ ุนูุตุฑ ููุงุฆูุฉ ุงูุชูุฏูุฏุงุช"""
        try:
            if threat_type in self.threat_intelligence:
                self.threat_intelligence[threat_type].add(value)
                logger.info(f"โ ุชู ุฅุถุงูุฉ {value} ููุงุฆูุฉ {threat_type}")
            else:
                logger.warning(f"ููุน ุชูุฏูุฏ ุบูุฑ ูุนุฑูู: {threat_type}")
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูุชูุฏูุฏ: {e}")
    
    async def remove_from_threat_list(self, threat_type: str, value: str):
        """ุฅุฒุงูุฉ ุนูุตุฑ ูู ูุงุฆูุฉ ุงูุชูุฏูุฏุงุช"""
        try:
            if threat_type in self.threat_intelligence:
                self.threat_intelligence[threat_type].discard(value)
                logger.info(f"โ ุชู ุฅุฒุงูุฉ {value} ูู ูุงุฆูุฉ {threat_type}")
            else:
                logger.warning(f"ููุน ุชูุฏูุฏ ุบูุฑ ูุนุฑูู: {threat_type}")
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅุฒุงูุฉ ุงูุชูุฏูุฏ: {e}")
    
    async def export_threat_intelligence(self) -> Dict:
        """ุชุตุฏูุฑ ููุงุฆู ุงูุชูุฏูุฏุงุช"""
        try:
            export_data = {
                'export_timestamp': datetime.now().isoformat(),
                'threat_intelligence': {
                    key: list(value) for key, value in self.threat_intelligence.items()
                },
                'cache_statistics': {
                    'url_reputation_entries': len(self.cache['url_reputation']),
                    'domain_info_entries': len(self.cache['domain_info']),
                    'ip_geolocation_entries': len(self.cache['ip_geolocation'])
                }
            }
            
            logger.info("๐ค ุชู ุชุตุฏูุฑ ููุงุฆู ุงูุชูุฏูุฏุงุช")
            return export_data
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุชุตุฏูุฑ ููุงุฆู ุงูุชูุฏูุฏุงุช: {e}")
            return {}
    
    async def import_threat_intelligence(self, import_data: Dict):
        """ุงุณุชูุฑุงุฏ ููุงุฆู ุงูุชูุฏูุฏุงุช"""
        try:
            if 'threat_intelligence' in import_data:
                for key, values in import_data['threat_intelligence'].items():
                    if key in self.threat_intelligence:
                        self.threat_intelligence[key].update(set(values))
                        logger.info(f"๐ฅ ุชู ุงุณุชูุฑุงุฏ {len(values)} ุนูุตุฑ ููุงุฆูุฉ {key}")
            
            logger.info("โ ุชู ุงุณุชูุฑุงุฏ ููุงุฆู ุงูุชูุฏูุฏุงุช ุจูุฌุงุญ")
            
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ููุงุฆู ุงูุชูุฏูุฏุงุช: {e}")


# ุฅูุดุงุก ูุซูู ุนุงู ููุงุณุชุฎุฏุงู
api_manager = ExternalAPIManager()